#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'rmw_version'
require 'vote'

include GLI

program_desc 'votes on rmw'

version Rmw::VERSION

desc 'contestant file'
default_value 'contestant.yml'
arg_name 'contestant file'
flag [:c,:contestant_file]

desc 'use this command to vote'
arg_name 'needs a contestant file'
command :vote do |c|
  c.action do |global_options,options,args|
    v = Vote.new(global_options[:contestant_file])
    v.vote_once
  end
end

desc 'vote lots of times'
arg_name 'needs a contestant file'
command :vote_lots do |c|
  c.desc 'times to vote'
  c.default_value 150
  c.flag :t, :times_to_vote

  c.desc 'anonymized or not'
  c.default_value false
  c.switch :a, :anonymized

  c.action do |global_options,options,args|
    v = Vote.new(global_options[:contestant_file])
    v.vote_x_times(options[:times_to_vote], options[:anonymized])
  end
end

desc 'vote anonymous once'
arg_name 'needs a contestant file'
command :vote_anon do |c|
  c.action do |global_options,options,args|
    v = Vote.new(global_options[:contestant_file])
    v.vote_anonymized
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
